GObject -- ChatClient



signals:

broadcast-received 		sender, msg
pm-received 			sender, msg
broadcast-cc-received 	msg
pm-cc-received			recipient, msg
user-joined 			user
user-left				user




void on_broadcastReceived(const char *sender, const char *message);
void on_broadcastCCReceived(const char *message);

void on_pmReceived(const char *sender, const char *message);
void on_pmCCReceived(const char *recipient, const char *message);

void on_userLeft(const char *username);
void on_userJoined(const char *username);





MESSAGE

<-r recipient -a author -t type>

-r recipient
<username> or <@> (for all)

-a author
<username>

or @ for all, rather than recipient



USERLIST

[username1 username2 username3 username4]




boolean connect_to_server(const char *port, const char *address);
boolean login_to_server(const char *username);

boolean send_message(const char *message);
boolean send_pm(const char *recipient, const char* message);


ui:

[recipient field][message field][send button]



/////



extended objects:

Message --- extends GtkBox

typedef enum message_type {
	BROADCAST,
	BROADCASTCC,
	WHISPER,
	WHISPERCC,
	USERJOINED,
	USERLEFT
} MessageType;

typedef struct message {
	MessageType type;
	char *sender;
	char *recipient;
} Message;

MessageLabel* message_label_new(MessageType type, )


